<!doctype html>
%html{:lang => "en"}
  %head
    %meta{:charset => "utf-8"}/
    %title reveal.js - The HTML Presentation Framework
    %meta{:content => "A framework for easily creating beautiful presentations using HTML", :name => "description"}/
    %meta{:content => "Hakim El Hattab", :name => "author"}/
    %meta{:content => "yes", :name => "apple-mobile-web-app-capable"}/
    %meta{:content => "black-translucent", :name => "apple-mobile-web-app-status-bar-style"}/
    %meta{:content => "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no", :name => "viewport"}/
    %link{:href => "css/reveal.min.css", :rel => "stylesheet"}/
    %link#theme{:href => "css/theme/default.css", :rel => "stylesheet"}/
    / For syntax highlighting
    %link{:href => "lib/css/zenburn.css", :rel => "stylesheet"}/
    / If the query includes 'print-pdf', use the PDF print sheet
    :javascript
      document.write( '<link rel="stylesheet" href="css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
    /[if lt IE 9]
      <script src="lib/js/html5shiv.js"></script>
  %body
    .reveal
      / Any section element inside of this container is displayed as a slide
      .slides
        %section
          %h1 Performance!
          %p 
            %a{ href: 'http://www.michaelhamrah.com'} Michael Hamrah
            %span /
            %a{ href: 'http://twitter.com/mhamrah'} @mhamrah
          %p
            Software Engineer @ Getty Images
        %section
          %h1 Performance
          %h4 vs. 
          %h1 Scalability
          %h4 vs. 
          %h1 Reliability
        %section
          %h1 Talking Points 
          %ul
            %li Networking and TCP
            %li Web Servers
            %li App Servers
            %li Rails
            %li Caching
            %li Databases
            %li Front End Code
            %li Iaas (Amazon) vs PaaS (Heroku)
            %li Example Architectures
        %section
          %h1 Why is this Important?
          .fragment
            %p Converstion Rates
            %p Attention Span, Frustration Levels
            %p Trust
            %p
              %a{ href: "http://www.webperformancetoday.com/2012/10/11/37-lessons-web-performance/"} Web Performance Lessons
              and
              %a{ href: "http://www.yottaa.com/blog/bid/265815/Coke-SodaStream-the-13-Websites-That-Crashed-During-Super-Bowl-2013" } Superbowl Website Failures
        %section
          %h1 It's not all about your code!
          %p Time spent in your code?
          %p Overall percentage?
        %section
          %h1 Networking!
          %h3 It's Mostly All About Networking
          %p
            What happens when you type an address in your browser?
          %p.fragment
            The TCP/IP Stack: Data Link, Network, Transport, Application (also Physical, Session, Presentation)
          %p.fragment
            This is called the OSI model.
        %section
          %h1 TCP: How data flows from A to B
          %ul
            %li A node sends "packets"
            %li Packets must be of a certain size (~1500 bytes, 64k max)
            %li Only a certain amount of packets are allowed "in flight"
            %li Packets are guaranteed delivery, in-order (different than UDP)
            %li Starts with a Three-Way handshake. Syn -> Syn Ack -> Ack
        %section
          %h1 How long does this take?
          %ul.fragment
            %li NYC to SFC: ~2530mi, RTT in vacuum: 27ms, RTT in fiber: 41.04ms
            %li IP and Routes add delay.  (Check out Ping and Traceroute)
            %li Remember the three way handshake? Latency.
            %li Bandwidth may not matter
            %li Connections are scarce, precious resources! (Why we have connection pooling)
        %section
          %h1 How does HTTP fit in?
          %ul 
            %li Application level protocol
            %li Defines how requests and responses sit on top of http
            %li Http 1.1: Keep-alive, pipelining
            %li Browsers 6-8 connections per server
            %li Think of 1mb of data split 1, 10, 100 ways
        %section
          %p
            Most client-server optimization is about tuning for network latency and managing TCP connections.
          %p
            Networking isn't just about a browser and a server.  Intra and inter data center connections are important!
          %p
            Optimize for throughput:  keep data small, reduce latency, reduce connections.
        %section
          %h1 Web Servers!
          %p
            Web servers like nginx and apache handle http requests.
          %p.fragment
            Application servers run programs which produce dynamic content. Think Thin, Unicorn, Puma, Node, etc.
          %p.fragment
            Sometimes it's a blurry line.  Depends on architecture.
        %section
          %h1 Threaded vs. Evented
          %p
            How connections are mapped to requests
          %p
            How threads are mapped to requests.
          %p
            Memory usage and context switching.
        %section
          %h1 All about Async
          %p
            Asynchoronous support and non-blocking io are also imporant.
          %p
            EventMachine, Node, Twisted: Event loops.
          %p
            Heroku's big problem with Rails
        %section
          %h1 A Typical Scenario
          %h3 Load Balancer -> WebServer -> App Server
          %ul
            %li Load Balancer Distributes Requests
            %li Web Servers (nginx/haproxy/varnish) handles connections, static content
            %li Application Servers or Process Pools respond to requests 
        %section
          %h1 So what do web servers actually do?
          %ul
            %li Manage connections
            %li Parse http requests
            %li Handle streaming i/o
            %li Add filters like gzip, authentication
            %li Application servers: Allow you to program on top of http.
        %section
          %h1 Differences with Application Servers (and Runtimes!)
          %ul
            %li Thin, Unicorn, Puma, Passenger
            %li MRI, Rubinus, JRuby
            %li Node vs. Rails vs. Django vs. Whatever?
        %section
          %h1 Rack
          %ul
            %li A common interface between Ruby web servers and web frameworks.
            %li Provides simple http primitives
            %li Supports middleware
        %section
          %h1 What does a rails request look like?
        %section
          %h1 Databases!
          %p
            They're beasts!
          %p
            Sql - ACID
          %p
            NoSql - BASE
          %p.fragment
            Both have their own set of problems.
        %section
          %h1 Tuning Databases
          %ul
            %li In both cases, it's about indices.
            %li Put your data in the way you want it out.
            %li Learn to find slow queries.
            %li Avoid n+1 queries (go for eager loading)
        %section
          %h1 Scaling Databases
          %ul
            %li How do you add more nodes?
            %li Understand read/write patterns
            %li Understand latency
        %section
          %h1 Polygot Data Landscape
          %ul
            %li Postgres, Mysql
            %li Cassandra, Riak, HBase
            %li MongoDb
            %li Redis
            %li Memcache
        %section
          %h1 Caching!
          %ul
            %li Html Caching
            %li Fragment Caching
            %li Object Caching
          %p.fragment
            How easy is it to expire your cache?
        %section
          %h1 Html caching
          %ul
            %li Uses http headers 
            %li ETags, Cache-Control, Expires
            %li Tools like Varnish are quite powerful
        %section
          %h1 Fragment Caching
          %ul
            %li Still Html!
            %li More surgical
        %section
          %h1 Object Caching
          %ul
            %li Most common
            %li Most flexible
            %li Easy db integration
            %li Memcache for reads
            %li Redis for structure data
            %li Compress (CPU cycles are there)
          %p
            You're just denormalizing data
        %section
          %h1 Queues!
          %h3 They'll be your best friend.
          %ul
            %li Very Async
            %li Great for handling spikes
            %li Offload low-priority requests
            %li Great for elastic workers
            %li Resque, IronWorker, Amaazon SQS
        %section
          %h1 Client-side techniques
          %ul
            %li Sprites
            %li Minification
            %li Domain Sharding
            %li cache-control
            %li Async javascript
            %li Image management
            %li CDNs!
        %section
          %h1 PaaS vs. IaaS
          %ul
            %li How do you want to run your apps?
            %li What control do you want or need?
            %li Interesting AWS: IAM, ElasticCache, R53/ELB, ASG, Search, CloudFormation, OpWorks, Multi-AZ, Multi-Region
            %li Cloud Services: Most tech is offered as SaaS
            %li NewRelic, Loggly
        %section
          %h1 Google's SPDY
          %ul
            %li One persistent SSL connection 
            %li True Duplex, no waiting
            %li Better window scaling
            %li Compressed headers (cookies, etc)
            %li Content Prioritization
            %li Server Push
        %section
          %h1 Problem
          %p
            The server request/response time is very long.
        %section
          %h1 Problem
          %p
            The server request/response time is very fast, but when more load increases, times increase dramatically.
        %section
          %h1 Problem
          %p
            A page takes a long time to load, but the server time is very fast.
        %section
          %h1 Problem
          %p
            We are sending images to a bunch of customers.  Sending images is very slow, but nothing is maxed out.
          %p
            The problem increases when we try and send more images.
        %section
          %h1 Example Architectures
          %ul
            %li How would you design a news site?
            %li How would you design an e-commerce site?
            %li How would you design a social site?
    %script{:src => "lib/js/head.min.js"}
    %script{:src => "js/reveal.min.js"}
    :javascript
      // Full list of configuration options available here:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
      	controls: true,
      	progress: true,
      	history: true,
      	center: true,

      	theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
      	transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/fade/none

      	// Optional libraries used to extend on reveal.js
      	dependencies: [
      		{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
      		{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      		{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      		{ src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
      		{ src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
      		{ src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
      	]
      });
